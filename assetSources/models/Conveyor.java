// Date: 12/09/2013 13:26:48
// Template version 1.1
// Java generated by Techne
// Keep in mind that you still need to fill in some blanks
// - ZeuX






package net.minecraft.src;

public class ModelConveyor extends ModelBase
{
  //fields
    ModelRenderer InputLeftElev;
    ModelRenderer InputRight;
    ModelRenderer InputRightElev;
    ModelRenderer InputLeft;
    ModelRenderer Forward;
    ModelRenderer ConnectorSupport3;
    ModelRenderer ConnectorSupport4;
    ModelRenderer ConnectorSupport2;
    ModelRenderer ConnectorSupport1;
    ModelRenderer Connector;
    ModelRenderer ConnectorSide2;
    ModelRenderer ConnectorSide3;
    ModelRenderer ConnectorSide1;
  
  public ModelConveyor()
  {
    textureWidth = 64;
    textureHeight = 32;
    
      InputLeftElev = new ModelRenderer(this, 0, 24);
      InputLeftElev.addBox(-4F, -3F, 0F, 8, 3, 1);
      InputLeftElev.setRotationPoint(6F, 24F, 0F);
      InputLeftElev.setTextureSize(64, 32);
      InputLeftElev.mirror = true;
      setRotation(InputLeftElev, 1.047198F, 1.570796F, 0F);
      InputRight = new ModelRenderer(this, 0, 21);
      InputRight.addBox(-4F, -8F, 0F, 8, 2, 1);
      InputRight.setRotationPoint(0F, 24F, 0F);
      InputRight.setTextureSize(64, 32);
      InputRight.mirror = true;
      setRotation(InputRight, 1.570796F, 1.570796F, 0F);
      InputRightElev = new ModelRenderer(this, 0, 17);
      InputRightElev.addBox(-4F, -3F, 0F, 8, 3, 1);
      InputRightElev.setRotationPoint(-6F, 24F, 0F);
      InputRightElev.setTextureSize(64, 32);
      InputRightElev.mirror = true;
      setRotation(InputRightElev, 1.047198F, -1.570796F, 0F);
      InputLeft = new ModelRenderer(this, 0, 28);
      InputLeft.addBox(-4F, -8F, 0F, 8, 2, 1);
      InputLeft.setRotationPoint(0F, 24F, 0F);
      InputLeft.setTextureSize(64, 32);
      InputLeft.mirror = true;
      setRotation(InputLeft, 1.570796F, -1.570796F, 0F);
      Forward = new ModelRenderer(this, 0, 0);
      Forward.addBox(-4F, 0F, 0F, 8, 16, 1);
      Forward.setRotationPoint(0F, 24F, -8F);
      Forward.setTextureSize(64, 32);
      Forward.mirror = true;
      setRotation(Forward, 1.570796F, 0F, 0F);
      ConnectorSupport3 = new ModelRenderer(this, 18, 0);
      ConnectorSupport3.addBox(-5F, 0F, -5F, 1, 8, 1);
      ConnectorSupport3.setRotationPoint(0F, 16F, 0F);
      ConnectorSupport3.setTextureSize(64, 32);
      ConnectorSupport3.mirror = true;
      setRotation(ConnectorSupport3, 0F, 0F, 0F);
      ConnectorSupport4 = new ModelRenderer(this, 18, 0);
      ConnectorSupport4.addBox(4F, 0F, -5F, 1, 8, 1);
      ConnectorSupport4.setRotationPoint(0F, 16F, 0F);
      ConnectorSupport4.setTextureSize(64, 32);
      ConnectorSupport4.mirror = true;
      setRotation(ConnectorSupport4, 0F, 0F, 0F);
      ConnectorSupport2 = new ModelRenderer(this, 18, 0);
      ConnectorSupport2.addBox(-5F, 0F, -8F, 1, 8, 1);
      ConnectorSupport2.setRotationPoint(0F, 16F, 0F);
      ConnectorSupport2.setTextureSize(64, 32);
      ConnectorSupport2.mirror = true;
      setRotation(ConnectorSupport2, 0F, 0F, 0F);
      ConnectorSupport1 = new ModelRenderer(this, 18, 0);
      ConnectorSupport1.addBox(4F, 0F, -8F, 1, 8, 1);
      ConnectorSupport1.setRotationPoint(0F, 16F, 0F);
      ConnectorSupport1.setTextureSize(64, 32);
      ConnectorSupport1.mirror = true;
      setRotation(ConnectorSupport1, 0F, 0F, 0F);
      Connector = new ModelRenderer(this, 18, 3);
      Connector.addBox(-3F, -3F, 0F, 6, 6, 6);
      Connector.setRotationPoint(0F, 16F, -8F);
      Connector.setTextureSize(64, 32);
      Connector.mirror = true;
      setRotation(Connector, 0F, 0F, 0F);
      ConnectorSide2 = new ModelRenderer(this, 18, 15);
      ConnectorSide2.addBox(0F, 0F, 0F, 6, 4, 1);
      ConnectorSide2.setRotationPoint(-4F, 14F, -2F);
      ConnectorSide2.setTextureSize(64, 32);
      ConnectorSide2.mirror = true;
      setRotation(ConnectorSide2, 0F, 1.570796F, 0F);
      ConnectorSide3 = new ModelRenderer(this, 18, 20);
      ConnectorSide3.addBox(0F, 0F, 0F, 8, 4, 1);
      ConnectorSide3.setRotationPoint(-4F, 14F, -2F);
      ConnectorSide3.setTextureSize(64, 32);
      ConnectorSide3.mirror = true;
      setRotation(ConnectorSide3, 0F, 0F, 0F);
      ConnectorSide1 = new ModelRenderer(this, 18, 15);
      ConnectorSide1.addBox(0F, 0F, 0F, 6, 4, 1);
      ConnectorSide1.setRotationPoint(3F, 14F, -2F);
      ConnectorSide1.setTextureSize(64, 32);
      ConnectorSide1.mirror = true;
      setRotation(ConnectorSide1, 0F, 1.570796F, 0F);
  }
  
  public void render(Entity entity, float f, float f1, float f2, float f3, float f4, float f5)
  {
    super.render(entity, f, f1, f2, f3, f4, f5);
    setRotationAngles(f, f1, f2, f3, f4, f5);
    InputLeftElev.render(f5);
    InputRight.render(f5);
    InputRightElev.render(f5);
    InputLeft.render(f5);
    Forward.render(f5);
    ConnectorSupport3.render(f5);
    ConnectorSupport4.render(f5);
    ConnectorSupport2.render(f5);
    ConnectorSupport1.render(f5);
    Connector.render(f5);
    ConnectorSide2.render(f5);
    ConnectorSide3.render(f5);
    ConnectorSide1.render(f5);
  }
  
  private void setRotation(ModelRenderer model, float x, float y, float z)
  {
    model.rotateAngleX = x;
    model.rotateAngleY = y;
    model.rotateAngleZ = z;
  }
  
  public void setRotationAngles(float f, float f1, float f2, float f3, float f4, float f5)
  {
    super.setRotationAngles(f, f1, f2, f3, f4, f5);
  }

}
