package ip.industrialProcessing.multiblock.dummy.block.frame;

import net.minecraft.client.model.ModelRenderer;
import net.minecraft.entity.Entity;
import net.minecraft.tileentity.TileEntity;
import ip.industrialProcessing.client.render.ModelingMultiblock;

public class MDmultiblockFrame extends ModelingMultiblock{

	// fields
		ModelRenderer FrontLeft;
		ModelRenderer BackLeft;
		ModelRenderer FrontRight;
		ModelRenderer BackRight;
		ModelRenderer FrontTop;
		ModelRenderer FrontBottom;
		ModelRenderer BackTop;
		ModelRenderer BackBottom;
		ModelRenderer LeftTop;
		ModelRenderer LeftBottom;
		ModelRenderer RightTop;
		ModelRenderer RightBottom;
		ModelRenderer FrontTopRight;
		ModelRenderer FrontTopLeft;
		ModelRenderer FrontBottomRight;
		ModelRenderer FrontBottomLeft;
		ModelRenderer BackTopLeft;
		ModelRenderer BackTopRight;
		ModelRenderer BackBottomLeft;
		ModelRenderer BackBottomRight;
		ModelRenderer BackBar;
		ModelRenderer FrontBar;
		ModelRenderer LeftBar;
		ModelRenderer RightBar;
		private Entity entity;

		public MDmultiblockFrame() {
			textureWidth = 64;
			textureHeight = 64;

			FrontLeft = new ModelRenderer(this, 0, 0);
			FrontLeft.addBox(0F, 0F, 0F, 1, 14, 1);
			FrontLeft.setRotationPoint(7F, 9F, -8F);
			FrontLeft.setTextureSize(64, 32);
			FrontLeft.mirror = true;
			setRotation(FrontLeft, 0F, 0F, 0F);
			BackLeft = new ModelRenderer(this, 0, 0);
			BackLeft.addBox(0F, 0F, 0F, 1, 14, 1);
			BackLeft.setRotationPoint(7F, 9F, 7F);
			BackLeft.setTextureSize(64, 32);
			BackLeft.mirror = true;
			setRotation(BackLeft, 0F, 0F, 0F);
			FrontRight = new ModelRenderer(this, 0, 0);
			FrontRight.addBox(0F, 0F, 0F, 1, 14, 1);
			FrontRight.setRotationPoint(-8F, 9F, -8F);
			FrontRight.setTextureSize(64, 32);
			FrontRight.mirror = true;
			setRotation(FrontRight, 0F, 0F, 0F);
			BackRight = new ModelRenderer(this, 0, 0);
			BackRight.addBox(0F, 0F, 0F, 1, 14, 1);
			BackRight.setRotationPoint(-8F, 9F, 7F);
			BackRight.setTextureSize(64, 32);
			BackRight.mirror = true;
			setRotation(BackRight, 0F, 0F, 0F);
			FrontTop = new ModelRenderer(this, 0, 47);
			FrontTop.addBox(0F, 0F, 0F, 14, 1, 1);
			FrontTop.setRotationPoint(-7F, 8F, -8F);
			FrontTop.setTextureSize(64, 32);
			FrontTop.mirror = true;
			setRotation(FrontTop, 0F, 0F, 0F);
			FrontBottom = new ModelRenderer(this, 0, 47);
			FrontBottom.addBox(0F, 0F, 0F, 14, 1, 1);
			FrontBottom.setRotationPoint(-7F, 23F, -8F);
			FrontBottom.setTextureSize(64, 32);
			FrontBottom.mirror = true;
			setRotation(FrontBottom, 0F, 0F, 0F);
			BackTop = new ModelRenderer(this, 0, 47);
			BackTop.addBox(0F, 0F, 0F, 14, 1, 1);
			BackTop.setRotationPoint(-7F, 8F, 7F);
			BackTop.setTextureSize(64, 32);
			BackTop.mirror = true;
			setRotation(BackTop, 0F, 0F, 0F);
			BackBottom = new ModelRenderer(this, 0, 47);
			BackBottom.addBox(0F, 0F, 0F, 14, 1, 1);
			BackBottom.setRotationPoint(-7F, 23F, 7F);
			BackBottom.setTextureSize(64, 32);
			BackBottom.mirror = true;
			setRotation(BackBottom, 0F, 0F, 0F);
			LeftTop = new ModelRenderer(this, 0, 49);
			LeftTop.addBox(0F, 0F, 0F, 1, 1, 14);
			LeftTop.setRotationPoint(7F, 8F, -7F);
			LeftTop.setTextureSize(64, 32);
			LeftTop.mirror = true;
			setRotation(LeftTop, 0F, 0F, 0F);
			LeftBottom = new ModelRenderer(this, 0, 49);
			LeftBottom.addBox(0F, 0F, 0F, 1, 1, 14);
			LeftBottom.setRotationPoint(7F, 23F, -7F);
			LeftBottom.setTextureSize(64, 32);
			LeftBottom.mirror = true;
			setRotation(LeftBottom, 0F, 0F, 0F);
			RightTop = new ModelRenderer(this, 0, 49);
			RightTop.addBox(0F, 0F, 0F, 1, 1, 14);
			RightTop.setRotationPoint(-8F, 8F, -7F);
			RightTop.setTextureSize(64, 32);
			RightTop.mirror = true;
			setRotation(RightTop, 0F, 0F, 0F);
			RightBottom = new ModelRenderer(this, 0, 49);
			RightBottom.addBox(0F, 0F, 0F, 1, 1, 14);
			RightBottom.setRotationPoint(-8F, 23F, -7F);
			RightBottom.setTextureSize(64, 32);
			RightBottom.mirror = true;
			setRotation(RightBottom, 0F, 0F, 0F);
			FrontTopRight = new ModelRenderer(this, 0, 0);
			FrontTopRight.addBox(0F, 0F, 0F, 1, 1, 1);
			FrontTopRight.setRotationPoint(-8F, 8F, -8F);
			FrontTopRight.setTextureSize(64, 32);
			FrontTopRight.mirror = true;
			setRotation(FrontTopRight, 0F, 0F, 0F);
			FrontTopLeft = new ModelRenderer(this, 0, 0);
			FrontTopLeft.addBox(0F, 0F, 0F, 1, 1, 1);
			FrontTopLeft.setRotationPoint(7F, 8F, -8F);
			FrontTopLeft.setTextureSize(64, 32);
			FrontTopLeft.mirror = true;
			setRotation(FrontTopLeft, 0F, 0F, 0F);
			FrontBottomRight = new ModelRenderer(this, 0, 0);
			FrontBottomRight.addBox(0F, 0F, 0F, 1, 1, 1);
			FrontBottomRight.setRotationPoint(-8F, 23F, -8F);
			FrontBottomRight.setTextureSize(64, 32);
			FrontBottomRight.mirror = true;
			setRotation(FrontBottomRight, 0F, 0F, 0F);
			FrontBottomLeft = new ModelRenderer(this, 0, 0);
			FrontBottomLeft.addBox(0F, 0F, 0F, 1, 1, 1);
			FrontBottomLeft.setRotationPoint(7F, 23F, -8F);
			FrontBottomLeft.setTextureSize(64, 32);
			FrontBottomLeft.mirror = true;
			setRotation(FrontBottomLeft, 0F, 0F, 0F);
			BackTopLeft = new ModelRenderer(this, 0, 0);
			BackTopLeft.addBox(0F, 0F, 0F, 1, 1, 1);
			BackTopLeft.setRotationPoint(7F, 8F, 7F);
			BackTopLeft.setTextureSize(64, 32);
			BackTopLeft.mirror = true;
			setRotation(BackTopLeft, 0F, 0F, 0F);
			BackTopRight = new ModelRenderer(this, 0, 0);
			BackTopRight.addBox(0F, 0F, 0F, 1, 1, 1);
			BackTopRight.setRotationPoint(-8F, 8F, 7F);
			BackTopRight.setTextureSize(64, 32);
			BackTopRight.mirror = true;
			setRotation(BackTopRight, 0F, 0F, 0F);
			BackBottomLeft = new ModelRenderer(this, 0, 0);
			BackBottomLeft.addBox(0F, 0F, 0F, 1, 1, 1);
			BackBottomLeft.setRotationPoint(7F, 23F, 7F);
			BackBottomLeft.setTextureSize(64, 32);
			BackBottomLeft.mirror = true;
			setRotation(BackBottomLeft, 0F, 0F, 0F);
			BackBottomRight = new ModelRenderer(this, 0, 0);
			BackBottomRight.addBox(0F, 0F, 0F, 1, 1, 1);
			BackBottomRight.setRotationPoint(-8F, 23F, 7F);
			BackBottomRight.setTextureSize(64, 32);
			BackBottomRight.mirror = true;
			setRotation(BackBottomRight, 0F, 0F, 0F);
			BackBar = new ModelRenderer(this, 0, 45);
			BackBar.addBox(0F, 0F, 0F, 21, 1, 1);
			BackBar.setRotationPoint(-8F, 23F, 7F);
			BackBar.setTextureSize(64, 32);
			BackBar.mirror = true;
			setRotation(BackBar, 0F, 0F, -0.7853982F);
			FrontBar = new ModelRenderer(this, 0, 45);
			FrontBar.addBox(0F, 0F, 0F, 21, 1, 1);
			FrontBar.setRotationPoint(-7F, 8F, -8F);
			FrontBar.setTextureSize(64, 32);
			FrontBar.mirror = true;
			setRotation(FrontBar, 0F, 0F, 0.7853982F);
			LeftBar = new ModelRenderer(this, 0, 23);
			LeftBar.addBox(0F, 0F, 0F, 1, 1, 21);
			LeftBar.setRotationPoint(7F, 23F, -8F);
			LeftBar.setTextureSize(64, 32);
			LeftBar.mirror = true;
			setRotation(LeftBar, 0.7853982F, 0F, 0F);
			RightBar = new ModelRenderer(this, 0, 23);
			RightBar.addBox(0F, 0F, 0F, 1, 1, 21);
			RightBar.setRotationPoint(-8F, 8F, -7F);
			RightBar.setTextureSize(64, 32);
			RightBar.mirror = true;
			setRotation(RightBar, -0.7853982F, 0F, 0F);
		}

		public void render(Entity entity, float f, float f1, float f2, float f3, float f4, float f5) {
			super.render(entity, f, f1, f2, f3, f4, f5);
			setRotationAngles(f, f1, f2, f3, f4, f5);
			FrontLeft.render(f5);
			BackLeft.render(f5);
			FrontRight.render(f5);
			BackRight.render(f5);
			FrontTop.render(f5);
			FrontBottom.render(f5);
			BackTop.render(f5);
			BackBottom.render(f5);
			LeftTop.render(f5);
			LeftBottom.render(f5);
			RightTop.render(f5);
			RightBottom.render(f5);
			FrontTopRight.render(f5);
			FrontTopLeft.render(f5);
			FrontBottomRight.render(f5);
			FrontBottomLeft.render(f5);
			BackTopLeft.render(f5);
			BackTopRight.render(f5);
			BackBottomLeft.render(f5);
			BackBottomRight.render(f5);
			BackBar.render(f5);
			FrontBar.render(f5);
			LeftBar.render(f5);
			RightBar.render(f5);

			this.entity = entity;
		}
		@Override
		public void renderModel(TileEntity tileEntity, float f5) {
			FrontLeft.render(f5);
			BackLeft.render(f5);
			FrontRight.render(f5);
			BackRight.render(f5);
			FrontTop.render(f5);
			FrontBottom.render(f5);
			BackTop.render(f5);
			BackBottom.render(f5);
			LeftTop.render(f5);
			LeftBottom.render(f5);
			RightTop.render(f5);
			RightBottom.render(f5);
			FrontTopRight.render(f5);
			FrontTopLeft.render(f5);
			FrontBottomRight.render(f5);
			FrontBottomLeft.render(f5);
			BackTopLeft.render(f5);
			BackTopRight.render(f5);
			BackBottomLeft.render(f5);
			BackBottomRight.render(f5);
			BackBar.render(f5);
			FrontBar.render(f5);
			LeftBar.render(f5);
			RightBar.render(f5);
		}

		public void setRotationAngles(float f, float f1, float f2, float f3, float f4, float f5) {
			super.setRotationAngles(f, f1, f2, f3, f4, f5, entity);
		}

		@Override
		public void renderModel(float f5, int connected) {
			FrontLeft.render(f5);
			BackLeft.render(f5);
			FrontRight.render(f5);
			BackRight.render(f5);
			FrontTop.render(f5);
			FrontBottom.render(f5);
			BackTop.render(f5);
			BackBottom.render(f5);
			LeftTop.render(f5);
			LeftBottom.render(f5);
			RightTop.render(f5);
			RightBottom.render(f5);
			FrontTopRight.render(f5);
			FrontTopLeft.render(f5);
			FrontBottomRight.render(f5);
			FrontBottomLeft.render(f5);
			BackTopLeft.render(f5);
			BackTopRight.render(f5);
			BackBottomLeft.render(f5);
			BackBottomRight.render(f5);
			BackBar.render(f5);
			FrontBar.render(f5);
			LeftBar.render(f5);
			RightBar.render(f5);
		}
}
